<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1123 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1123.xml">
<!ENTITY RFC2045 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2045.xml">
<!ENTITY RFC2046 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2046.xml">
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2673 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2673.xml">
<!ENTITY RFC3339 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3339.xml">
<!ENTITY RFC3986 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml">
<!ENTITY RFC3987 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3987.xml">
<!ENTITY RFC4122 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4122.xml">
<!ENTITY RFC4291 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4291.xml">
<!ENTITY RFC4329 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4329.xml">
<!ENTITY RFC4648 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4648.xml">
<!ENTITY RFC5321 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5321.xml">
<!ENTITY RFC5890 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5890.xml">
<!ENTITY RFC5891 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5891.xml">
<!ENTITY RFC6531 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6531.xml">
<!ENTITY RFC6570 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6570.xml">
<!ENTITY RFC6901 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6901.xml">
<!ENTITY RFC8259 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8259.xml">
]>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc strict="no"?>
<?rfc rfcedstyle="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes" ?>
<rfc category="info" docName="draft-bhutton-json-schema-validation-00" ipr="trust200902">
    <front>
        <title abbrev="JSON Schema Validation">
            JSON Schema Validation: A Vocabulary for Structural Validation of JSON
        </title>

        <author fullname="Austin Wright" initials="A" surname="Wright" role="editor">
            <address>
                <email>aaa@bzfx.net</email>
            </address>
        </author>

        <author fullname="Henry Andrews" initials="H" surname="Andrews" role="editor">
            <address>
                <email>andrews_henry@yahoo.com</email>
            </address>
        </author>

        <author fullname="Ben Hutton" initials="B" surname="Hutton" role="editor">
            <address>
                <email>ben@jsonschema.dev</email>
                <uri>https://jsonschema.dev</uri>
            </address>
        </author>

        <date year="2021"/>
        <workgroup>Internet Engineering Task Force</workgroup>
        <keyword>JSON</keyword>
        <keyword>Schema</keyword>
        <keyword>validation</keyword>

        <abstract>
            <t>
                JSON Schema (application/schema+json) has several purposes, one of which is JSON
                instance validation.
                This document specifies a vocabulary for JSON Schema to describe the meaning of JSON
                documents, provide hints for user interfaces working with JSON data, and to make
                assertions about what a valid document must look like.
            </t>
        </abstract>

        <note title="Note to Readers">
            <t>
                The issues list for this draft can be found at
                <eref target="https://github.com/json-schema-org/json-schema-spec/issues"/>.
            </t>
            <t>
                For additional information, see <eref target="https://json-schema.org/"/>.
            </t>
            <t>
                To provide feedback, use this issue tracker, the communication methods listed on the
                homepage, or email the document editors.
            </t>
        </note>
    </front>

    <middle>
        <section title="Introduction">
            <t>
                JSON Schema can be used to require that a given JSON document (an instance)
                satisfies a certain number of criteria. These criteria are asserted by using
                keywords described in this specification. In addition, a set of keywords
                is also defined to assist in interactive user interface instance generation.
            </t>
            <t>
                This specification will use the concepts, syntax, and terminology defined
                by the <xref target="json-schema">JSON Schema core</xref> specification.
            </t>
        </section>

        <section title="Conventions and Terminology">
            <t>
                <!-- The text in this section has been copied from the official boilerplate,
                and should not be modified.-->

                The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
                "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be
                interpreted as described in <xref target="RFC2119">RFC 2119</xref>.
            </t>
            <t>
                This specification uses the term "container instance" to refer to both array and
                object instances. It uses the term "children instances" to refer to array elements
                or object member values.
            </t>
            <t>
                Elements in an array value are said to be unique if no two elements of this array
                are <xref target="json-schema">equal</xref>.
            </t>
        </section>

        <section title="Overview">
            <t>
                JSON Schema validation asserts constraints on the structure of instance data.
                An instance location that satisfies all asserted constraints is then
                annotated with any keywords that contain non-assertion information,
                such as descriptive metadata and usage hints.  If all locations within
                the instance satisfy all asserted constraints, then the instance is
                said to be valid against the schema.
            </t>
            <t>
                Each schema object is independently evaluated against each instance location
                to which it applies.  This greatly simplifies the implementation requirements
                for validators by ensuring that they do not need to maintain state across
                the document-wide validation process.
            </t>
            <t>
                This specification defines a set of assertion keywords, as well as a small vocabulary
                of metadata keywords that can be used to annotate the JSON instance with
                useful information.  The <xref target="format" /> keyword is intended primarily
                as an annotation, but can optionally be used as an assertion.  The
                <xref target="content" /> keywords are annotations for working with documents
                embedded as JSON strings.
            </t>
        </section>

        <section title="Interoperability Considerations">

            <section title="Validation of String Instances">
                <t>
                    It should be noted that the nul character (\u0000) is valid in a JSON string. An
                    instance to validate may contain a string value with this character, regardless
                    of the ability of the underlying programming language to deal with such data.
                </t>
            </section>

            <section title="Validation of Numeric Instances">
                <t>
                    The JSON specification allows numbers with arbitrary precision, and JSON Schema
                    does not add any such bounds.
                    This means that numeric instances processed by JSON Schema can be arbitrarily large and/or
                    have an arbitrarily long decimal part, regardless of the ability of the
                    underlying programming language to deal with such data.
                </t>
            </section>

            <section title="Regular Expressions" anchor="regexInterop">
                <t>
                    Keywords that use regular expressions, or constrain the instance value
                    to be a regular expression, are subject to the interoperability
                    considerations for regular expressions in the
                    <xref target="json-schema">JSON Schema Core</xref> specification.
                </t>
            </section>

        </section>

        <section title="Meta-Schema" anchor="meta-schema">
            <t>
                The current URI for the default JSON Schema dialect meta-schema is
                <eref target="https://json-schema.org/draft/next/schema"/>.
                For schema author convenience, this meta-schema describes a dialect
                consisting of all vocabularies
                defined in this specification and the JSON Schema Core specification,
                as well as two former keywords which are reserved for a transitional period.
                Individual vocabulary and vocabulary meta-schema URIs are given for
                each section below.  Certain vocabularies are optional to support, which
                is explained in detail in the relevant sections.
            </t>
            <t>
                Updated vocabulary and meta-schema URIs MAY be published between
                specification drafts in order to correct errors.  Implementations
                SHOULD consider URIs dated after this specification draft and
                before the next to indicate the same syntax and semantics
                as those listed here.
            </t>
        </section>

        <section title="A Vocabulary for Structural Validation">
            <t>
                Validation keywords in a schema impose requirements for successful validation of an
                instance.  These keywords are all assertions without any annotation behavior.
            </t>
            <t>
                Meta-schemas that do not use "$vocabulary" SHOULD be considered to
                require this vocabulary as if its URI were present with a value of true.
            </t>
            <t>
                The current URI for this vocabulary, known as the Validation vocabulary, is:
                &lt;https://json-schema.org/draft/next/vocab/validation&gt;.
            </t>
            <t>
                The current URI for the corresponding meta-schema is:
                <eref target="https://json-schema.org/draft/next/meta/validation"/>.
            </t>

            <section title="Validation Keywords for Any Instance Type" anchor="general">
                <section title="type">
                    <t>
                        The value of this keyword MUST be either a string or an array. If it is
                        an array, elements of the array MUST be strings and MUST be unique.
                    </t>
                    <t>
                        String values MUST be one of the six primitive types
                        ("null", "boolean", "object", "array", "number", or "string"),
                        or "integer" which matches any number with a zero fractional part.
                    </t>
                    <t>
                        If the value of "type" is a string, then an instance validates successfully if
                        its type matches the type represented by the value of the string.

                        If the value of "type" is an array, then an instance validates successfully if
                        its type matches any of the types indicated by the strings in the array.
                    </t>
                </section>

                <section title="enum" anchor="enum">
                    <t>
                        The value of this keyword MUST be an array. This array SHOULD have at
                        least one element. Elements in the array SHOULD be unique.
                    </t>
                    <t>
                        An instance validates successfully against this keyword if its value is
                        equal to one of the elements in this keyword's array value.
                    </t>
                    <t>
                        Elements in the array might be of any type, including null.
                    </t>
                </section>

                <section title="const">
                    <t>
                        The value of this keyword MAY be of any type, including null.
                    </t>
                    <t>
                        Use of this keyword is functionally equivalent to an
                        <xref target="enum">"enum"</xref> with a single value.
                    </t>
                    <t>
                        An instance validates successfully against this keyword if its value is
                        equal to the value of the keyword.
                    </t>
                </section>
            </section>

            <section title="Validation Keywords for Numeric Instances (number and integer)"
                     anchor="numeric">
                <section title="multipleOf">
                    <t>
                        The value of "multipleOf" MUST be a number, strictly greater than 0.
                    </t>
                    <t>
                        A numeric instance is valid only if division by this keyword's value results in
                        an integer.
                    </t>
                </section>

                <section title="maximum">
                    <t>
                        The value of "maximum" MUST be a number, representing an inclusive upper limit
                        for a numeric instance.
                    </t>
                    <t>
                        If the instance is a number, then this keyword validates only if the instance is
                        less than or exactly equal to "maximum".
                    </t>
                </section>

                <section title="exclusiveMaximum">
                    <t>
                        The value of "exclusiveMaximum" MUST be a number, representing an exclusive upper
                        limit for a numeric instance.
                    </t>
                    <t>
                        If the instance is a number, then the instance is valid only if it has a value
                        strictly less than (not equal to) "exclusiveMaximum".
                    </t>
                </section>

                <section title="minimum">
                    <t>
                        The value of "minimum" MUST be a number, representing an inclusive lower limit
                        for a numeric instance.
                    </t>
                    <t>
                        If the instance is a number, then this keyword validates only if the instance is
                        greater than or exactly equal to "minimum".
                    </t>
                </section>

                <section title="exclusiveMinimum">
                    <t>
                        The value of "exclusiveMinimum" MUST be a number, representing an exclusive lower
                        limit for a numeric instance.
                    </t>
                    <t>
                        If the instance is a number, then the instance is valid only if it has a value
                        strictly greater than (not equal to) "exclusiveMinimum".
                    </t>
                </section>
            </section>

            <section title="Validation Keywords for Strings" anchor="string">
                <section title="maxLength">
                    <t>
                        The value of this keyword MUST be a non-negative integer.</t>
                    <t>
                        A string instance is valid against this keyword if its
                        length is less than, or equal to, the value of this keyword.
                    </t>
                    <t>
                        The length of a string instance is defined as the number of its
                        characters as defined by <xref target="RFC8259">RFC 8259</xref>.
                    </t>
                </section>

                <section title="minLength">
                    <t>
                        The value of this keyword MUST be a non-negative integer.
                    </t>
                    <t>
                        A string instance is valid against this keyword if its
                        length is greater than, or equal to, the value of this keyword.
                    </t>

                    <t>
                        The length of a string instance is defined as the number of its
                        characters as defined by <xref target="RFC8259">RFC 8259</xref>.
                    </t>
                    <t>
                        Omitting this keyword has the same behavior as a value of 0.
                    </t>
                </section>

                <section title="pattern" anchor="pattern">
                    <t>
                        The value of this keyword MUST be a string. This string SHOULD be a
                        valid regular expression, according to the ECMA-262 regular expression
                        dialect.
                    </t>
                    <t>
                        A string instance is considered valid if the regular
                        expression matches the instance successfully. Recall: regular
                        expressions are not implicitly anchored.
                    </t>
                </section>
            </section>

            <section title="Validation Keywords for Arrays">

                <section title="maxItems">
                    <t>
                        The value of this keyword MUST be a non-negative integer.
                    </t>
                    <t>
                        An array instance is valid against "maxItems" if its size is
                        less than, or equal to, the value of this keyword.
                    </t>
                </section>

                <section title="minItems">
                    <t>
                        The value of this keyword MUST be a non-negative integer.
                    </t>
                    <t>
                        An array instance is valid against "minItems" if its size is
                        greater than, or equal to, the value of this keyword.
                    </t>
                    <t>
                        Omitting this keyword has the same behavior as a value of 0.
                    </t>
                </section>

                <section title="uniqueItems">
                    <t>
                        The value of this keyword MUST be a boolean.
                    </t>
                    <t>
                        If this keyword has boolean value false, the instance validates
                        successfully. If it has boolean value true, the instance validates
                        successfully if all of its elements are unique.
                    </t>
                    <t>
                        Omitting this keyword has the same behavior as a value of false.
                    </t>
                </section>

                <section title="maxContains">
                    <t>
                        The value of this keyword MUST be a non-negative integer.
                    </t>
                    <t>
                        If "contains" is not present within the same schema object,
                        then this keyword has no effect.
                    </t>
                    <t>
                        An instance array or object is valid against "maxContains" in two ways,
                        depending on the form of the annotation result of an adjacent
                        <xref target="json-schema">"contains"</xref> keyword. The first way is if
                        the annotation result is an array and the length of that array is less than
                        or equal to the "maxContains" value. The second way is if the annotation
                        result is a boolean "true" and the instance length (number of items or
                        properties) is less than or equal to the "maxContains" value.
                    </t>
                </section>

                <section title="minContains">
                    <t>
                        The value of this keyword MUST be a non-negative integer.
                    </t>
                    <t>
                        If "contains" is not present within the same schema object,
                        then this keyword has no effect.
                    </t>
                    <t>
                        An instance array or object is valid against "minContains" in two ways,
                        depending on the form of the annotation result of an adjacent
                        <xref target="json-schema">"contains"</xref> keyword. The first way is if
                        the annotation result is an array and the length of that array is greater
                        than or equal to the "minContains" value. The second way is if the
                        annotation result is a boolean "true" and the instance length (number of
                        items or properties) is greater than or equal to the "minContains" value.
                    </t>
                    <t>
                        A value of 0 is allowed, but is only useful for setting a range
                        of occurrences from 0 to the value of "maxContains".  A value of
                        0 with no "maxContains" causes "contains" to always pass validation.
                    </t>
                    <t>
                        Omitting this keyword has the same behavior as a value of 1.
                    </t>
                </section>
            </section>

            <section title="Validation Keywords for Objects">
                <section title="maxProperties">
                    <t>
                        The value of this keyword MUST be a non-negative integer.
                    </t>
                    <t>
                        An object instance is valid against "maxProperties" if its
                        number of properties is less than, or equal to, the value of this
                        keyword.
                    </t>
                </section>

                <section title="minProperties">
                    <t>
                        The value of this keyword MUST be a non-negative integer.
                    </t>
                    <t>
                        An object instance is valid against "minProperties" if its
                        number of properties is greater than, or equal to, the value of this
                        keyword.
                    </t>
                    <t>
                        Omitting this keyword has the same behavior as a value of 0.
                    </t>
                </section>

                <section title="required">
                    <t>
                        The value of this keyword MUST be an array.
                        Elements of this array, if any, MUST be strings, and MUST be unique.
                    </t>
                    <t>
                        An object instance is valid against this keyword if every item in the array is
                        the name of a property in the instance.
                    </t>
                    <t>
                        Omitting this keyword has the same behavior as an empty array.
                    </t>
                </section>

                <section title="dependentRequired">
                    <t>
                        The value of this keyword MUST be an object.  Properties in
                        this object, if any, MUST be arrays.  Elements in each array,
                        if any, MUST be strings, and MUST be unique.
                    </t>
                    <t>
                        This keyword specifies properties that are required if a specific
                        other property is present.  Their requirement is dependent on the
                        presence of the other property.
                    </t>
                    <t>
                        Validation succeeds if, for each name that appears in both
                        the instance and as a name within this keyword's value, every
                        item in the corresponding array is also the name of a property
                        in the instance.
                    </t>
                    <t>
                        Omitting this keyword has the same behavior as an empty object.
                    </t>
                </section>
            </section>
        </section>

        <section title='Vocabularies for Semantic Content With "format"' anchor="format">

            <section title="Foreword">
                <t>
                    Structural validation alone may be insufficient to allow an application to correctly
                    utilize certain values. The "format" annotation keyword is defined to allow schema
                    authors to convey semantic information for a fixed subset of values which are
                    accurately described by authoritative resources, be they RFCs or other external
                    specifications.
                </t>

                <t>
                    The value of this keyword is called a format attribute. It MUST be a string. A
                    format attribute can generally only validate a given set of instance types. If
                    the type of the instance to validate is not in this set, validation for this
                    format attribute and instance SHOULD succeed.  All format attributes defined
                    in this section apply to strings, but a format attribute can be specified
                    to apply to any instance types defined in the data model defined in the
                    <xref target="json-schema">core JSON Schema.</xref>
                    <cref>
                        Note that the "type" keyword in this specification defines an "integer" type
                        which is not part of the data model. Therefore a format attribute can be
                        limited to numbers, but not specifically to integers. However, a numeric
                        format can be used alongside the "type" keyword with a value of "integer",
                        or could be explicitly defined to always pass if the number is not an integer,
                        which produces essentially the same behavior as only applying to integers.
                    </cref>
                </t>

                <t>
                    The current URI for this vocabulary, known as the Format-Annotation vocabulary, is:
                    &lt;https://json-schema.org/draft/next/vocab/format-annotation&gt;. The current
                    URI for the corresponding meta-schema is:
                    <eref target="https://json-schema.org/draft/next/meta/format-annotation"/>.
                    Implementing support for this vocabulary is REQUIRED.
                </t>
                <t>
                    In addition to the Format-Annotation vocabulary, a secondary vocabulary is available
                    for custom meta-schemas that defines "format" as an assertion. The URI for the
                    Format-Assertion vocabulary, is:
                    &lt;https://json-schema.org/draft/next/vocab/format-assertion&gt;. The current
                    URI for the corresponding meta-schema is:
                    <eref target="https://json-schema.org/draft/next/meta/format-assertion"/>.
                    Implementing support for the Format-Assertion vocabulary is OPTIONAL.
                </t>
                <t>
                    Specifying both the Format-Annotation and the Format-Assertion vocabularies is functionally
                    equivalent to specifying only the Format-Assertion vocabulary since its requirements
                    are a superset of the Format-Annotation vocabulary.
                </t>
            </section>

            <section title="Implementation Requirements">
                <t>
                    The "format" keyword functions as defined by the vocabulary which is referenced.
                </t>

                <section title="Format-Annotation Vocabulary">
                    <t>
                        The value of format MUST be collected as an annotation, if the implementation
                        supports annotation collection. This enables application-level validation when
                        schema validation is unavailable or inadequate.
                    </t>
                    <t>
                        Implementations MAY still treat "format" as an assertion in addition to an
                        annotation and attempt to validate the value's conformance to the specified
                        semantics. The implementation MUST provide options to enable and disable such
                        evaluation and MUST be disabled by default. Implementations SHOULD document
                        their level of support for such validation.
                        <cref>
                            Specifying the Format-Annotation vocabulary and enabling validation in an
                            implementation should not be viewed as being equivalent to specifying
                            the Format-Assertion vocabulary since implementations are not required to
                            provide full validation support when the Format-Assertion vocabulary
                            is not specified.
                        </cref>
                    </t>
                    <t>
                        When the implementation is configured for assertion behavior, it:
                        <list>
                            <t>
                                SHOULD provide an implementation-specific best effort validation
                                for each format attribute defined below;
                            </t>
                            <t>
                                MAY choose to implement validation of any or all format attributes
                                as a no-op by always producing a validation result of true;
                            </t>
                        </list>
                        <cref>
                            This matches the current reality of implementations, which provide
                            widely varying levels of validation, including no validation at all,
                            for some or all format attributes.  It is also designed to encourage
                            relying only on the annotation behavior and performing semantic
                            validation in the application, which is the recommended best practice.
                        </cref>
                    </t>
                </section>

                <section title="Format-Assertion Vocabulary">
                    <t>
                        When the Format-Assertion vocabulary is declared with a value of true,
                        implementations MUST provide full validation support for all of the formats
                        defined by this specificaion. Implementations that cannot provide full
                        validation support MUST refuse to process the schema.
                    </t>
                    <t>
                        An implementation that supports the Format-Assertion vocabulary:
                        <list>
                            <t>
                                MUST still collect "format" as an annotation if the implementation
                                supports annotation collection;
                            </t>
                            <t>
                                MUST evaluate "format" as an assertion;
                            </t>
                            <t>
                                MUST implement syntactic validation for all format attributes defined
                                in this specification, and for any additional format attributes that
                                it recognizes, such that there exist possible instance values
                                of the correct type that will fail validation.
                            </t>
                        </list>
                        The requirement for minimal validation of format attributes is intentionally
                        vague and permissive, due to the complexity involved in many of the attributes.
                        Note in particular that the requirement is limited to syntactic checking; it is
                        not to be expected that an implementation would send an email, attempt to connect
                        to a URL, or otherwise check the existence of an entity identified by a format
                        instance.
                        <cref>
                            The expectation is that for simple formats such as date-time, syntactic
                            validation will be thorough.  For a complex format such as email addresses,
                            which are the amalgamation of various standards and numerous adjustments
                            over time, with obscure and/or obsolete rules that may or may not be
                            restricted by other applications making use of the value, a minimal validation
                            is sufficient.  For example, an instance string that does not contain
                            an "@" is clearly not a valid email address, and an "email" or "hostname"
                            containing characters outside of 7-bit ASCII is likewise clearly invalid.
                        </cref>
                    </t>
                    <t>
                        It is RECOMMENDED that implementations use a common parsing library for each format,
                        or a well-known regular expression.  Implementations SHOULD clearly document
                        how and to what degree each format attribute is validated.
                    </t>
                    <t>
                        The <xref target="meta-schema">standard core and validation meta-schema</xref>
                        includes this vocabulary in its "$vocabulary" keyword with a value of false,
                        since by default implementations are not required to support this keyword
                        as an assertion.  Supporting the format vocabulary with a value of true is
                        understood to greatly increase code size and in some cases execution time,
                        and will not be appropriate for all implementations.
                    </t>
                </section>
                <section title="Custom format attributes">
                    <t>
                        Implementations MAY support custom format attributes. Save for agreement between
                        parties, schema authors SHALL NOT expect a peer implementation to support such
                        custom format attributes. An implementation MUST NOT fail to collect unknown formats
                        as annotations.  When the Format-Assertion vocabulary is specified, implementations
                        MUST fail upon encountering unknown formats.
                    </t>
                    <t>
                        Vocabularies do not support specifically declaring different value sets for keywords.
                        Due to this limitation, and the historically uneven implementation of this keyword,
                        it is RECOMMENDED to define additional keywords in a custom vocabulary rather than
                        additional format attributes if interoperability is desired.
                    </t>
                </section>
            </section>

            <section title="Defined Formats">

                <section title="Dates, Times, and Duration">
                    <t>
                        These attributes apply to string instances.
                    </t>
                    <t>
                        Date and time format names are derived from
                        <xref target="RFC3339">RFC 3339, section 5.6</xref>.
                        The duration format is from the ISO 8601 ABNF as given
                        in Appendix A of RFC 3339.
                    </t>
                    <t>
                        Implementations supporting formats SHOULD implement support for
                        the following attributes:
                        <list style="hanging">
                            <t hangText="date-time:">
                                A string instance is valid against this attribute if it is
                                a valid representation according to the "date-time" production.
                            </t>
                            <t hangText="date:">
                                A string instance is valid against this attribute if it is
                                a valid representation according to the "full-date" production.
                            </t>
                            <t hangText="time:">
                                A string instance is valid against this attribute if it is
                                a valid representation according to the "full-time" production.
                            </t>
                            <t hangText="duration:">
                                A string instance is valid against this attribute if it is
                                a valid representation according to the "duration" production.
                            </t>
                        </list>
                    </t>
                    <t>
                        Implementations MAY support additional attributes using the other
                        production names defined anywhere in that RFC.  If "full-date" or "full-time"
                        are implemented, the corresponding short form ("date" or "time"
                        respectively) MUST be implemented, and MUST behave identically.
                        Implementations SHOULD NOT define extension attributes
                        with any name matching an RFC 3339 production unless it validates
                        according to the rules of that production.
                        <cref>
                            There is not currently consensus on the need for supporting
                            all RFC 3339 formats, so this approach of reserving the
                            namespace will encourage experimentation without committing
                            to the entire set.  Either the format implementation requirements
                            will become more flexible in general, or these will likely
                            either be promoted to fully specified attributes or dropped.
                        </cref>
                    </t>
                </section>

                <section title="Email Addresses">
                    <t>
                        These attributes apply to string instances.
                    </t>
                    <t>
                        A string instance is valid against these attributes if it is a valid
                        Internet email address as follows:
                        <list style="hanging">
                            <t hangText="email:">
                                As defined by the "Mailbox" ABNF rule in
                                <xref target="RFC5321">RFC 5321, section 4.1.2</xref>.
                            </t>
                            <t hangText="idn-email:">
                                As defined by the extended "Mailbox" ABNF rule in
                                <xref target="RFC6531">RFC 6531, section 3.3</xref>.
                            </t>
                        </list>
                        Note that all strings valid against the "email" attribute are also
                        valid against the "idn-email" attribute.
                    </t>
                </section>
                <section title="Hostnames">
                    <t>
                        These attributes apply to string instances.
                    </t>
                    <t>
                        A string instance is valid against these attributes if it is a valid
                        representation for an Internet hostname as follows:
                        <list style="hanging">
                            <t hangText="hostname:">
                                As defined by <xref target="RFC1123">RFC 1123, section 2.1</xref>,
                                including host names produced using the Punycode algorithm
                                specified in <xref target="RFC5891">RFC 5891, section 4.4</xref>.
                            </t>
                            <t hangText="idn-hostname:">
                                As defined by either RFC 1123 as for hostname, or an
                                internationalized hostname as defined by
                                <xref target="RFC5890">RFC 5890, section 2.3.2.3</xref>.
                            </t>
                        </list>
                        Note that all strings valid against the "hostname" attribute are also
                        valid against the "idn-hostname" attribute.
                    </t>
                </section>

                <section title="IP Addresses">
                    <t>
                        These attributes apply to string instances.
                    </t>
                    <t>
                        A string instance is valid against these attributes if it is a valid
                        representation of an IP address as follows:
                        <list style="hanging">
                            <t hangText="ipv4:">
                                An IPv4 address according to the "dotted-quad" ABNF
                                syntax as defined in
                                <xref target="RFC2673">RFC 2673, section 3.2</xref>.
                            </t>
                            <t hangText="ipv6:">
                                An IPv6 address as defined in
                                <xref target="RFC4291">RFC 4291, section 2.2</xref>.
                            </t>
                        </list>
                    </t>
                </section>

                <section title="Resource Identifiers">
                    <t>
                        These attributes apply to string instances.
                    </t>
                    <t>
                        <list style="hanging">
                            <t hangText="uri:">
                                A string instance is valid against this attribute if it is
                                a valid URI, according to <xref target="RFC3986"/>.
                            </t>
                            <t hangText="uri-reference:">
                                A string instance is valid against this attribute if it is a valid URI
                                Reference (either a URI or a relative-reference),
                                according to <xref target="RFC3986"/>.
                            </t>
                            <t hangText="iri:">
                                A string instance is valid against this attribute if it is
                                a valid IRI, according to <xref target="RFC3987"/>.
                            </t>
                            <t hangText="iri-reference:">
                                A string instance is valid against this attribute if it is a valid IRI
                                Reference (either an IRI or a relative-reference),
                                according to <xref target="RFC3987"/>.
                            </t>
                            <t hangText="uuid:">
                                A string instance is valid against this attribute if it is a valid
                                string representation of a UUID, according to <xref target="RFC4122"/>.
                            </t>
                        </list>
                    </t>
                    <t>
                        Note that all valid URIs are valid IRIs, and all valid URI References are
                        also valid IRI References.
                    </t>
                    <t>
                        Note also that the "uuid" format is for plain UUIDs, not UUIDs in URNs.  An example
                        is "f81d4fae-7dec-11d0-a765-00a0c91e6bf6".  For UUIDs as URNs, use the "uri" format,
                        with a "pattern" regular expression of "^urn:uuid:" to indicate the URI scheme and
                        URN namespace.
                    </t>
                </section>

                <section title="uri-template">
                    <t>
                        This attribute applies to string instances.
                    </t>
                    <t>
                        A string instance is valid against this attribute if it is a valid URI Template
                        (of any level), according to <xref target="RFC6570"/>.
                    </t>
                    <t>
                        Note that URI Templates may be used for IRIs; there is no separate
                        IRI Template specification.
                    </t>
                </section>

                <section title="JSON Pointers">
                    <t>
                        These attributes apply to string instances.
                    </t>
                    <t>
                        <list style="hanging">
                            <t hangText="json-pointer:">
                                A string instance is valid against this attribute if it
                                is a valid JSON string representation of a JSON Pointer,
                                according to <xref target="RFC6901">RFC 6901, section 5</xref>.
                            </t>
                            <t hangText="relative-json-pointer:">
                                A string instance is valid against this attribute if it is a valid
                                <xref target="relative-json-pointer">Relative JSON Pointer</xref>.
                            </t>
                        </list>
                        To allow for both absolute and relative JSON Pointers, use "anyOf" or
                        "oneOf" to indicate support for either format.
                    </t>
                </section>
                <section title="regex">
                    <t>
                        This attribute applies to string instances.
                    </t>
                    <t>
                        A regular expression, which SHOULD be valid according to the
                        <xref target="ecma262">ECMA-262</xref> regular expression dialect.
                    </t>
                    <t>
                        Implementations that validate formats MUST accept at least the subset of
                        ECMA-262 defined in the <xref target="regexInterop">Regular Expressions</xref>
                        section of this specification, and SHOULD accept all valid ECMA-262 expressions.
                    </t>
                </section>
            </section>
        </section>

        <section title='A Vocabulary for the Contents of String-Encoded Data' anchor="content">

            <section title="Foreword">
                <t>
                    Annotations defined in this section indicate that an instance contains
                    non-JSON data encoded in a JSON string.
                </t>
                <t>
                    These properties provide additional information required to interpret JSON data
                    as rich multimedia documents.  They describe the type of content, how it is encoded,
                    and/or how it may be validated.  They do not function as validation assertions;
                    a malformed string-encoded document MUST NOT cause the containing instance
                    to be considered invalid.
                </t>
                <t>
                    Meta-schemas that do not use "$vocabulary" SHOULD be considered to
                    require this vocabulary as if its URI were present with a value of true.
                </t>
                <t>
                    The current URI for this vocabulary, known as the Content vocabulary, is:
                    &lt;https://json-schema.org/draft/next/vocab/content&gt;.
                </t>
                <t>
                    The current URI for the corresponding meta-schema is:
                    <eref target="https://json-schema.org/draft/next/meta/content"/>.
                </t>
            </section>

            <section title="Implementation Requirements">
                <t>
                    Due to security and performance concerns, as well as the open-ended nature of
                    possible content types, implementations MUST NOT automatically decode, parse,
                    and/or validate the string contents by default.  This additionally supports
                    the use case of embedded documents intended for processing by a different
                    consumer than that which processed the containing document.
                </t>
                <t>
                    All keywords in this section apply only to strings, and have no
                    effect on other data types.
                </t>
                <t>
                    Implementations MAY offer the ability to decode, parse, and/or validate
                    the string contents automatically.  However, it MUST NOT perform these
                    operations by default, and MUST provide the validation result of each
                    string-encoded document separately from the enclosing document.  This
                    process SHOULD be equivalent to fully evaluating the instance against
                    the original schema, followed by using the annotations to decode, parse,
                    and/or validate each string-encoded document.
                    <cref>
                        For now, the exact mechanism of performing and returning parsed
                        data and/or validation results from such an automatic decoding, parsing,
                        and validating feature is left unspecified.  Should such a feature
                        prove popular, it may be specified more thoroughly in a future draft.
                    </cref>
                </t>
                <t>
                    See also the <xref target="security">Security Considerations</xref>
                    sections for possible vulnerabilities introduced by automatically
                    processing the instance string according to these keywords.
                </t>
            </section>

            <section title="contentEncoding">

                <t>
                    If the instance value is a string, this property defines that the string
                    SHOULD be interpreted as binary data and decoded using the encoding
                    named by this property.
                </t>

                <t>
                    Possible values indicating base 16, 32, and 64 encodings with several
                    variations are listed in <xref target="RFC4648">RFC 4648</xref>.  Additionally,
                    sections 6.7 and 6.8 of <xref target="RFC2045">RFC 2045</xref> provide
                    encodings used in MIME.  As "base64" is defined in both RFCs, the definition
                    from RFC 4648 SHOULD be assumed unless the string is specifically intended
                    for use in a MIME context.  Note that all of these encodings result in
                    strings consisting only of 7-bit ASCII characters.  Therefore, this keyword
                    has no meaning for strings containing characters outside of that range.
                </t>

                <t>
                    If this keyword is absent, but "contentMediaType" is present, this
                    indicates that the encoding is the identity encoding, meaning that
                    no transformation was needed in order to represent the content in
                    a UTF-8 string.
                </t>

                <t>
                    The value of this property MUST be a string.
                </t>
            </section>

            <section title="contentMediaType">
                <t>
                    If the instance is a string, this property indicates the media type
                    of the contents of the string.  If "contentEncoding" is present,
                    this property describes the decoded string.
                </t>
                <t>
                    The value of this property MUST be a string, which MUST be a media type,
                    as defined by <xref target="RFC2046">RFC 2046</xref>.
                </t>
            </section>

            <section title="contentSchema">
                <t>
                    If the instance is a string, and if "contentMediaType" is present, this
                    property contains a schema which describes the structure of the string.
                </t>
                <t>
                    This keyword MAY be used with any media type that can be mapped into
                    JSON Schema's data model.
                </t>
                <t>
                    The value of this property MUST be a valid JSON schema. It SHOULD be ignored if
                    "contentMediaType" is not present.
                </t>
            </section>

            <section title="Example">
                <figure>
                    <preamble>
                        Here is an example schema, illustrating the use of "contentEncoding" and
                        "contentMediaType":
                    </preamble>
                    <artwork>
<![CDATA[
{
    "type": "string",
    "contentEncoding": "base64",
    "contentMediaType": "image/png"
}
]]>
                    </artwork>
                    <postamble>
                        Instances described by this schema are expected to be strings,
                        and their values should be interpretable as base64-encoded PNG images.
                    </postamble>
                </figure>

                <figure>
                    <preamble>
                        Another example:
                    </preamble>
                    <artwork>
<![CDATA[
{
    "type": "string",
    "contentMediaType": "text/html"
}
]]>
                    </artwork>
                    <postamble>
                        Instances described by this schema are expected to be strings containing HTML,
                        using whatever character set the JSON string was decoded into.
                        Per section 8.1 of
                        <xref target="RFC8259">RFC 8259</xref>, outside of an entirely closed
                        system, this MUST be UTF-8.
                    </postamble>
                </figure>

                <figure>
                    <preamble>
                        This example describes a JWT that is MACed using the HMAC SHA-256
                        algorithm, and requires the "iss" and "exp" fields in its claim set.
                    </preamble>
                    <artwork>
<![CDATA[
{
    "type": "string",
    "contentMediaType": "application/jwt",
    "contentSchema": {
        "type": "array",
        "minItems": 2,
        "prefixItems": [
            {
                "const": {
                    "typ": "JWT",
                    "alg": "HS256"
                }
            },
            {
                "type": "object",
                "required": ["iss", "exp"],
                "properties": {
                    "iss": {"type": "string"},
                    "exp": {"type": "integer"}
                }
            }
        ]
    }
}]]>
                    </artwork>
                    <postamble>
                        Note that "contentEncoding" does not appear.  While the "application/jwt"
                        media type makes use of base64url encoding, that is defined by the media
                        type, which determines how the JWT string is decoded into a list of two
                        JSON data structures: first the header, and then the payload.  Since the
                        JWT media type ensures that the JWT can be represented in a JSON string,
                        there is no need for further encoding or decoding.
                    </postamble>
                </figure>
            </section>

        </section>

        <section title="A Vocabulary for Basic Meta-Data Annotations">
            <t>
                These general-purpose annotation keywords provide commonly used information
                for documentation and user interface display purposes.  They are not intended
                to form a comprehensive set of features.  Rather, additional vocabularies
                can be defined for more complex annotation-based applications.
            </t>
            <t>
                Meta-schemas that do not use "$vocabulary" SHOULD be considered to
                require this vocabulary as if its URI were present with a value of true.
            </t>
            <t>
                The current URI for this vocabulary, known as the Meta-Data vocabulary, is:
                &lt;https://json-schema.org/draft/next/vocab/meta-data&gt;.
            </t>
            <t>
                The current URI for the corresponding meta-schema is:
                <eref target="https://json-schema.org/draft/next/meta/meta-data"/>.
            </t>

            <section title='"title" and "description"'>
                <t>
                    The value of both of these keywords MUST be a string.
                </t>
                <t>
                    Both of these keywords can be used to decorate a user interface with
                    information about the data produced by this user interface. A title will
                    preferably be short, whereas a description will provide explanation about
                    the purpose of the instance described by this schema.
                </t>
            </section>

            <section title='"default"'>
                <t>
                    There are no restrictions placed on the value of this keyword.  When
                    multiple occurrences of this keyword are applicable to a single
                    sub-instance, implementations SHOULD remove duplicates.
                </t>
                <t>
                    This keyword can be used to supply a default JSON value associated with a
                    particular schema. It is RECOMMENDED that a default value be valid against
                    the associated schema.
                </t>
            </section>

            <section title='"deprecated"'>
                <t>
                    The value of this keyword MUST be a boolean.  When multiple occurrences
                    of this keyword are applicable to a single sub-instance, applications
                    SHOULD consider the instance location to be deprecated if any occurrence
                    specifies a true value.
                </t>
                <t>
                    If "deprecated" has a value of boolean true, it indicates that applications
                    SHOULD refrain from usage of the declared property. It MAY mean the property
                    is going to be removed in the future.
                </t>
                <t>
                    A root schema containing "deprecated" with a value of true indicates that
                    the entire resource being described MAY be removed in the future.
                </t>
                <t>
                    The "deprecated" keyword applies to each instance location to which the
                    schema object containing the keyword successfully applies.  This can
                    result in scenarios where every array item or object property
                    is deprecated even though the containing array or object is not.
                </t>
                <t>
                    Omitting this keyword has the same behavior as a value of false.
                </t>
            </section>

            <section title='"readOnly" and "writeOnly"'>
                <t>
                    The value of these keywords MUST be a boolean.  When multiple occurrences
                    of these keywords are applicable to a single sub-instance, the resulting
                    behavior SHOULD be as for a true value if any occurrence specifies a true value,
                    and SHOULD be as for a false value otherwise.
                </t>
                <t>
                    If "readOnly" has a value of boolean true, it indicates that the value
                    of the instance is managed exclusively by the owning authority, and
                    attempts by an application to modify the value of this property are
                    expected to be ignored or rejected by that owning authority.
                </t>
                <t>
                    An instance document that is marked as "readOnly" for the entire document
                    MAY be ignored if sent to the owning authority, or MAY result in an
                    error, at the authority's discretion.
                </t>
                <t>
                    If "writeOnly" has a value of boolean true, it indicates that the value
                    is never present when the instance is retrieved from the owning authority.
                    It can be present when sent to the owning authority to update or create
                    the document (or the resource it represents), but it will not be included
                    in any updated or newly created version of the instance.
                </t>
                <t>
                    An instance document that is marked as "writeOnly" for the entire document
                    MAY be returned as a blank document of some sort, or MAY produce an error
                    upon retrieval, or have the retrieval request ignored, at the authority's
                    discretion.
                </t>
                <t>
                    For example, "readOnly" would be used to mark a database-generated serial
                    number as read-only, while "writeOnly" would be used to mark a password
                    input field.
                </t>
                <t>
                    These keywords can be used to assist in user interface instance generation.
                    In particular, an application MAY choose to use a widget that hides
                    input values as they are typed for write-only fields.
                </t>
                <t>
                    Omitting these keywords has the same behavior as values of false.
                </t>
            </section>

            <section title='"examples"'>
                <t>
                    The value of this keyword MUST be an array.
                    There are no restrictions placed on the values within the array.
                    When multiple occurrences of this keyword are applicable to a single
                    sub-instance, implementations MUST provide a flat array of all
                    values rather than an array of arrays.
                </t>
                <t>
                    This keyword can be used to provide sample JSON values associated with a
                    particular schema, for the purpose of illustrating usage.  It is
                    RECOMMENDED that these values be valid against the associated schema.
                </t>
                <t>
                    Implementations MAY use the value(s) of "default", if present, as
                    an additional example.  If "examples" is absent, "default"
                    MAY still be used in this manner.
                </t>
            </section>
        </section>

        <section title="Security Considerations" anchor="security">
            <t>
                JSON Schema validation defines a vocabulary for JSON Schema core and concerns all
                the security considerations listed there.
            </t>
            <t>
                JSON Schema validation allows the use of Regular Expressions, which have numerous
                different (often incompatible) implementations.
                Some implementations allow the embedding of arbitrary code, which is outside the
                scope of JSON Schema and MUST NOT be permitted.
                Regular expressions can often also be crafted to be extremely expensive to compute
                (with so-called "catastrophic backtracking"), resulting in a denial-of-service
                attack.
            </t>
            <t>
                Implementations that support validating or otherwise evaluating instance
                string data based on "contentEncoding" and/or "contentMediaType" are at
                risk of evaluating data in an unsafe way based on misleading information.
                Applications can mitigate this risk by only performing such processing
                when a relationship between the schema and instance is established
                (e.g., they share the same authority).
            </t>
            <t>
                Processing a media type or encoding is subject to the security considerations
                of that media type or encoding.  For example, the security considerations
                of <xref target="RFC4329">RFC 4329 Scripting Media Types</xref> apply when
                processing JavaScript or ECMAScript encoded within a JSON string.
            </t>
        </section>

        <!--
        <section title="IANA Considerations">
            <t>
                This specification does not have any influence with regards to IANA.
            </t>
        </section>
        -->
    </middle>

    <back>
        <!-- References Section -->
        <references title="Normative References">
            &RFC2119;
            &RFC1123;
            &RFC2045;
            &RFC2046;
            &RFC2673;
            &RFC3339;
            &RFC3986;
            &RFC3987;
            &RFC4122;
            &RFC4291;
            &RFC4648;
            &RFC5321;
            &RFC5890;
            &RFC5891;
            &RFC6570;
            &RFC6531;
            &RFC6901;
            &RFC8259;
            <reference anchor="ecma262"
            target="https://www.ecma-international.org/ecma-262/11.0">
                <front>
                    <title>ECMA-262, 11th edition specification</title>
                    <author/>
                    <date month="June" year="2020" />
                </front>
            </reference>
            <reference anchor="relative-json-pointer">
                <front>
                    <title>Relative JSON Pointers</title>
                    <author initials="G." surname="Luff">
                        <organization/>
                    </author>
                    <author initials="H." surname="Andrews">
                        <organization>Cloudflare, Inc.</organization>
                    </author>
                    <author fullname="Ben Hutton" initials="B" surname="Hutton" role="editor">
                    </author>
                    <date year="2020" month="December"/>
                </front>
                <seriesInfo name="Internet-Draft" value="draft-handrews-relative-json-pointer-01" />
            </reference>
            <reference anchor="json-schema">
                <front>
                    <title>JSON Schema: A Media Type for Describing JSON Documents</title>
                    <author initials="A." surname="Wright">
                        <organization/>
                    </author>
                    <author initials="H." surname="Andrews">
                        <organization/>
                    </author>
                    <author initials="B." surname="Hutton">
                        <organization/>
                    </author>
                    <author initials="G." surname="Dennis">
                        <organization/>
                    </author>
                    <date year="2020" month="December"/>
                </front>
                <seriesInfo name="Internet-Draft" value="draft-bhutton-json-schema-00" />
            </reference>
        </references>

        <references title="Informative References">
            &RFC4329;
        </references>

        <section title="Keywords Moved from Validation to Core">
            <t>
                Several keywords have been moved from this document into the
                <xref target="json-schema">Core Specification</xref> as of this draft, in some
                cases with re-naming or other changes.  This affects the following former
                validation keywords:
                <list style="hanging">
                    <t hangText='"definitions"'>
                        Renamed to "$defs" to match "$ref" and be shorter to type.
                        Schema vocabulary authors SHOULD NOT define a "definitions" keyword
                        with different behavior in order to avoid invalidating schemas that
                        still use the older name.  While "definitions" is absent in the
                        single-vocabulary meta-schemas referenced by this document, it
                        remains present in the default meta-schema, and implementations
                        SHOULD assume that "$defs" and "definitions" have the same
                        behavior when that meta-schema is used.
                    </t>
                    <t hangText='"allOf", "anyOf", "oneOf", "not", "if", "then", "else",
                                 "items", "additionalItems", "contains", "propertyNames",
                                 "properties", "patternProperties", "additionalProperties"'>
                        All of these keywords apply subschemas to the instance and combine
                        their results, without asserting any conditions of their own.
                        Without assertion keywords, these applicators can only cause assertion
                        failures by using the false boolean schema, or by inverting the result
                        of the true boolean schema (or equivalent schema objects).
                        For this reason, they are better defined as a generic mechanism on which
                        validation, hyper-schema, and extension vocabularies can all be based.
                    </t>
                    <t hangText='"dependencies"'>
                        This keyword had two different modes of behavior, which made it
                        relatively challenging to implement and reason about.
                        The schema form has been moved to Core and renamed to
                        "dependentSchemas", as part of the applicator vocabulary.
                        It is analogous to "properties", except that instead of applying
                        its subschema to the property value, it applies it to the object
                        containing the property.
                        The property name array form is retained here and renamed to
                        "dependentRequired", as it is an assertion which is a shortcut
                        for the conditional use of the "required" assertion keyword.
                    </t>
                </list>
            </t>
        </section>

        <section title="Acknowledgments">
            <t>
                Thanks to
                Gary Court,
                Francis Galiegue,
                Kris Zyp,
                and Geraint Luff
                for their work on the initial drafts of JSON Schema.
            </t>
            <t>
                Thanks to
                Jason Desrosiers,
                Daniel Perrett,
                Erik Wilde,
                Evgeny Poberezkin,
                Brad Bowman,
                Gowry Sankar,
                Donald Pipowitch,
                Dave Finlay,
                Denis Laxalde,
                Phil Sturgeon,
                Shawn Silverman,
                and Karen Etheridge
                for their submissions and patches to the document.
            </t>
        </section>

        <section title="ChangeLog">
            <t>
                <cref>This section to be removed before leaving Internet-Draft status.</cref>
            </t>
            <t>
                <list style="hanging">
                    <t hangText="draft-bhutton-json-schema-validation-00">
                        <list style="symbols">
                            <t>Correct email format RFC reference to 5321 instead of 5322</t>
                            <t>Clarified the set and meaning of "contentEncoding" values</t>
                            <t>Reference ECMA-262, 11th edition for regular expression support</t>
                            <t>Split "format" into an annotation only vocabulary and an assertion vocabulary</t>
                            <t>Clarify "deprecated" when applicable to arrays</t>
                        </list>
                    </t>
                    <t hangText="draft-handrews-json-schema-validation-02">
                        <list style="symbols">
                            <t>Grouped keywords into formal vocabularies</t>
                            <t>Update "format" implementation requirements in terms of vocabularies</t>
                            <t>By default, "format" MUST NOT be validated, although validation can be enabled</t>
                            <t>A vocabulary declaration can be used to require "format" validation</t>
                            <t>Moved "definitions" to the core spec as "$defs"</t>
                            <t>Moved applicator keywords to the core spec</t>
                            <t>Renamed the array form of "dependencies" to "dependentRequired", moved the schema form to the core spec</t>
                            <t>Specified all "content*" keywords as annotations, not assertions</t>
                            <t>Added "contentSchema" to allow applying a schema to a string-encoded document</t>
                            <t>Also allow RFC 4648 encodings in "contentEncoding"</t>
                            <t>Added "minContains" and "maxContains"</t>
                            <t>Update RFC reference for "hostname" and "idn-hostname"</t>
                            <t>Add "uuid" and "duration" formats</t>
                        </list>
                    </t>
                    <t hangText="draft-handrews-json-schema-validation-01">
                        <list style="symbols">
                            <t>This draft is purely a clarification with no functional changes</t>
                            <t>Provided the general principle behind ignoring annotations under "not" and similar cases</t>
                            <t>Clarified "if"/"then"/"else" validation interactions</t>
                            <t>Clarified "if"/"then"/"else" behavior for annotation</t>
                            <t>Minor formatting and cross-referencing improvements</t>
                        </list>
                    </t>
                    <t hangText="draft-handrews-json-schema-validation-00">
                        <list style="symbols">
                            <t>Added "if"/"then"/"else"</t>
                            <t>Classify keywords as assertions or annotations per the core spec</t>
                            <t>Warn of possibly removing "dependencies" in the future</t>
                            <t>Grouped validation keywords into sub-sections for readability</t>
                            <t>Moved "readOnly" from hyper-schema to validation meta-data</t>
                            <t>Added "writeOnly"</t>
                            <t>Added string-encoded media section, with former hyper-schema "media" keywords</t>
                            <t>Restored "regex" format (removal was unintentional)</t>
                            <t>Added "date" and "time" formats, and reserved additional RFC 3339 format names</t>
                            <t>I18N formats: "iri", "iri-reference", "idn-hostname", "idn-email"</t>
                            <t>Clarify that "json-pointer" format means string encoding, not URI fragment</t>
                            <t>Fixed typo that inverted the meaning of "minimum" and "exclusiveMinimum"</t>
                            <t>Move format syntax references into Normative References</t>
                            <t>JSON is a normative requirement</t>
                        </list>
                    </t>
                    <t hangText="draft-wright-json-schema-validation-01">
                        <list style="symbols">
                            <t>Standardized on hyphenated format names with full words ("uriref" becomes "uri-reference")</t>
                            <t>Add the formats "uri-template" and "json-pointer"</t>
                            <t>Changed "exclusiveMaximum"/"exclusiveMinimum" from boolean modifiers of "maximum"/"minimum" to independent numeric fields.</t>
                            <t>Split the additionalItems/items into two sections</t>
                            <t>Reworked properties/patternProperties/additionalProperties definition</t>
                            <t>Added "examples" keyword</t>
                            <t>Added "contains" keyword</t>
                            <t>Allow empty "required" and "dependencies" arrays</t>
                            <t>Fixed "type" reference to primitive types</t>
                            <t>Added "const" keyword</t>
                            <t>Added "propertyNames" keyword</t>
                        </list>
                    </t>
                    <t hangText="draft-wright-json-schema-validation-00">
                        <list style="symbols">
                            <t>Added additional security considerations</t>
                            <t>Removed reference to "latest version" meta-schema, use numbered version instead</t>
                            <t>Rephrased many keyword definitions for brevity</t>
                            <t>Added "uriref" format that also allows relative URI references</t>
                        </list>
                    </t>
                    <t hangText="draft-fge-json-schema-validation-00">
                        <list style="symbols">
                            <t>Initial draft.</t>
                            <t>Salvaged from draft v3.</t>
                            <t>Redefine the "required" keyword.</t>
                            <t>Remove "extends", "disallow"</t>
                            <t>Add "anyOf", "allOf", "oneOf", "not", "definitions", "minProperties",
                            "maxProperties".</t>
                            <t>"dependencies" member values can no longer be single strings; at
                            least one element is required in a property dependency array.</t>
                            <t>Rename "divisibleBy" to "multipleOf".</t>
                            <t>"type" arrays can no longer have schemas; remove "any" as a possible
                            value.</t>
                            <t>Rework the "format" section; make support optional.</t>
                            <t>"format": remove attributes "phone", "style", "color"; rename
                            "ip-address" to "ipv4"; add references for all attributes.</t>
                            <t>Provide algorithms to calculate schema(s) for array/object
                            instances.</t>
                            <t>Add interoperability considerations.</t>
                        </list>
                    </t>
                </list>
            </t>
        </section>
    </back>
</rfc>
